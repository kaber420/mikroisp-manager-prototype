# main.py - Lanzador principal para ¬µMonitor Pro
# Versi√≥n: 0.3.0 - Optimizado para pools de conexi√≥n lazy
# Autor: Kaber420, Gemini pro 2.5, claude sonnet 4.5 
import sqlite3
import getpass
import multiprocessing
import logging
import sys
import signal
from uvicorn import Config, Server

# Importamos las funciones y objetos necesarios de nuestros m√≥dulos
from monitor import run_monitor
from api import app as fastapi_app
from database import (
    INVENTORY_DB_FILE, 
    setup_databases
    # Ya NO importamos init_connection_pools - no es necesario con lazy init
)
from auth import get_password_hash

# Configuraci√≥n del logging para el lanzador
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - [%(processName)s] - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

logger = logging.getLogger(__name__)


def check_and_create_first_user():
    """
    Verifica si existe alg√∫n usuario en la base de datos. Si no, inicia
    un asistente interactivo para crear el primer usuario administrador.
    """
    try:
        conn = sqlite3.connect(INVENTORY_DB_FILE)
        cursor = conn.cursor()
        
        # Primero, asegurarnos de que la tabla 'users' existe
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users'")
        if cursor.fetchone() is None:
            logger.warning("La tabla 'users' no existe. Ejecutando configuraci√≥n inicial de la base de datos.")
            conn.close()
            # Si la tabla no existe, setup_databases la crear√°
            setup_databases()
            # Reconectar despu√©s del setup
            conn = sqlite3.connect(INVENTORY_DB_FILE)
            cursor = conn.cursor()

        # Ahora, verificar si hay usuarios
        cursor.execute("SELECT COUNT(*) FROM users")
        user_count = cursor.fetchone()[0]
        
        if user_count == 0:
            logger.warning("No se encontraron usuarios en la base de datos.")
            print("\n" + "=" * 70)
            print("  ASISTENTE DE CONFIGURACI√ìN INICIAL")
            print("  Creaci√≥n del Primer Administrador")
            print("=" * 70)
            
            username = input("\nIntroduce el nombre de usuario para el administrador: ").strip()
            if not username:
                print("‚ùå Error: El nombre de usuario no puede estar vac√≠o.")
                sys.exit(1)

            while True:
                password = getpass.getpass("Introduce la contrase√±a: ")
                if not password:
                    print("‚ö†Ô∏è  La contrase√±a no puede estar vac√≠a.")
                    continue
                password_confirm = getpass.getpass("Confirma la contrase√±a: ")
                if password == password_confirm:
                    break
                print("‚ö†Ô∏è  Las contrase√±as no coinciden. Int√©ntalo de nuevo.")

            hashed_password = get_password_hash(password)
            
            cursor.execute(
                "INSERT INTO users (username, hashed_password, role) VALUES (?, ?, ?)",
                (username, hashed_password, 'admin')
            )
            conn.commit()
            logger.info(f"‚úì Usuario administrador '{username}' creado exitosamente.")
            print(f"\n‚úì ¬°Usuario '{username}' creado exitosamente!")
            print("  La aplicaci√≥n ahora se iniciar√°...\n")
        else:
            logger.info(f"‚úì Se encontraron {user_count} usuario(s) en la base de datos.")
            
    except sqlite3.Error as e:
        logger.error(f"‚ùå Error de base de datos durante la verificaci√≥n de usuario: {e}")
        sys.exit(1)
    finally:
        if conn:
            conn.close()


def start_api_server():
    """
    Funci√≥n objetivo para el proceso de la API.
    Configura y ejecuta el servidor Uvicorn para la aplicaci√≥n FastAPI.
    """
    # Configuraci√≥n personalizada del logging para Uvicorn
    uvicorn_log_config = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "default": {
                "()": "uvicorn.logging.DefaultFormatter",
                "fmt": "%(asctime)s - %(levelname)s - [API Server] - %(message)s",
                "datefmt": "%Y-%m-%d %H:%M:%S",
            },
            "access": {
                "()": "uvicorn.logging.AccessFormatter",
                "fmt": '%(asctime)s - INFO - [API Server] - %(client_addr)s - "%(request_line)s" %(status_code)s',
                "datefmt": "%Y-%m-%d %H:%M:%S",
            },
        },
        "handlers": {
            "default": {
                "formatter": "default",
                "class": "logging.StreamHandler",
                "stream": "ext://sys.stderr",
            },
            "access": {
                "formatter": "access",
                "class": "logging.StreamHandler",
                "stream": "ext://sys.stdout",
            },
        },
        "loggers": {
            "uvicorn": {"handlers": ["default"], "level": "INFO"},
            "uvicorn.error": {"level": "INFO"},
            "uvicorn.access": {"handlers": ["access"], "level": "INFO", "propagate": False},
        },
    }

    config = Config(
        app=fastapi_app, 
        host="0.0.0.0", 
        port=8000, 
        log_config=uvicorn_log_config,
        access_log=True
    )
    server = Server(config)
    
    logger.info("‚úì Servidor API iniciado en http://0.0.0.0:8000")
    
    # Uvicorn se ejecuta en el hilo/proceso actual
    server.run()


def cleanup_resources():
    """
    Limpia los recursos de conexiones de base de datos al finalizar.
    """
    try:
        # Importar solo cuando sea necesario
        from database import inventory_pool, stats_manager
        
        logger.info("Cerrando pools de conexiones...")
        inventory_pool.close_all()
        stats_manager.close_all()
        
        logger.info("‚úì Recursos de base de datos liberados correctamente.")
    except Exception as e:
        logger.error(f"Error al cerrar conexiones: {e}")


def signal_handler(signum, frame):
    """
    Manejador de se√±ales para shutdown graceful.
    """
    logger.info(f"\n‚úã Se√±al {signum} recibida. Iniciando shutdown graceful...")
    cleanup_resources()
    sys.exit(0)


def main():
    """
    Funci√≥n principal que orquesta el inicio de la aplicaci√≥n.
    """
    # Registrar manejadores de se√±ales para cleanup
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    print("\n" + "=" * 70)
    print("  ¬µMonitor Pro - Sistema de Monitoreo Ubiquiti")
    print("  Versi√≥n 1.2.0 - Optimizado")
    print("=" * 70 + "\n")
    
    # Paso 1: Configurar las bases de datos
    logger.info("‚öôÔ∏è  Configurando bases de datos...")
    setup_databases()
    
    # Paso 2: Ya NO es necesario inicializar pools manualmente
    # Los pools usan lazy initialization y se crean autom√°ticamente al usarse
    logger.info("‚úì Sistema configurado con pools de conexi√≥n lazy (se inicializan autom√°ticamente)")
    
    # Paso 3: Verificar y crear el primer usuario si es necesario
    check_and_create_first_user()

    # Paso 4: Mostrar informaci√≥n de inicio
    logger.info("üöÄ Lanzando los servicios de la aplicaci√≥n...")
    print("\n" + "-" * 70)
    print("  SERVICIOS ACTIVOS:")
    print("  ‚Ä¢ Monitor de Red: Ejecut√°ndose en segundo plano")
    print("  ‚Ä¢ API Web: http://localhost:8000")
    print("  ‚Ä¢ Dashboard: http://localhost:8000/")
    print("\n  Presiona Ctrl+C para detener la aplicaci√≥n.")
    print("-" * 70 + "\n")
    
    # Paso 5: Crear los procesos para el monitor y la API
    # Usamos multiprocessing para ejecuci√≥n paralela real
    process_monitor = multiprocessing.Process(
        target=run_monitor, 
        name="MonitorProcess",
        daemon=False
    )
    process_api = multiprocessing.Process(
        target=start_api_server, 
        name="ApiProcess",
        daemon=False
    )

    try:
        # Paso 6: Iniciar ambos procesos
        logger.info("üîÑ Iniciando proceso de monitoreo...")
        process_monitor.start()
        
        logger.info("üîÑ Iniciando servidor API...")
        process_api.start()
        
        logger.info("‚úì Todos los servicios est√°n activos y funcionando.")

        # El proceso principal espera a que ambos terminen
        # (lo cual no suceder√° hasta que se interrumpa con Ctrl+C)
        process_monitor.join()
        process_api.join()

    except KeyboardInterrupt:
        logger.info("\n‚úã Interrupci√≥n detectada (Ctrl+C). Deteniendo servicios...")
        print("\n‚è≥ Deteniendo ¬µMonitor Pro... Por favor, espera.\n")
        
        # Terminar los procesos hijos de forma ordenada
        if process_api.is_alive():
            logger.info("‚èπÔ∏è  Deteniendo servidor API...")
            process_api.terminate()
            process_api.join(timeout=10)
            if process_api.is_alive():
                logger.warning("‚ö†Ô∏è  Forzando cierre del servidor API...")
                process_api.kill()
                process_api.join()
        
        if process_monitor.is_alive():
            logger.info("‚èπÔ∏è  Deteniendo monitor de red...")
            process_monitor.terminate()
            process_monitor.join(timeout=10)
            if process_monitor.is_alive():
                logger.warning("‚ö†Ô∏è  Forzando cierre del monitor...")
                process_monitor.kill()
                process_monitor.join()
        
        # Limpiar recursos
        cleanup_resources()
        
        print("\n" + "=" * 70)
        print("  ‚úì ¬µMonitor Pro detenido correctamente")
        print("  ¬°Hasta pronto!")
        print("=" * 70 + "\n")
        
        sys.exit(0)
    
    except Exception as e:
        logger.error(f"‚ùå Error cr√≠tico en la aplicaci√≥n: {e}", exc_info=True)
        
        # Intentar detener los procesos si a√∫n est√°n vivos
        if 'process_api' in locals() and process_api.is_alive():
            process_api.terminate()
            process_api.join(timeout=5)
        
        if 'process_monitor' in locals() and process_monitor.is_alive():
            process_monitor.terminate()
            process_monitor.join(timeout=5)
        
        cleanup_resources()
        sys.exit(1)


if __name__ == "__main__":
    # Configuraci√≥n espec√≠fica para multiprocessing en diferentes plataformas
    # Esto previene problemas en Windows y macOS
    multiprocessing.set_start_method('spawn', force=True)
    
    # Ejecutar la funci√≥n principal
    main()